{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifItem.js","components/GifData.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","alert","className","onChange","target","value","type","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifsData","map","gifs","id","title","imageUrl","images","fixed_width","GifItem","img","console","log","src","alt","GifData","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,uBAAMC,SAVa,SAAEC,GACrBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,GAC9BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,KACVO,MAAM,sCAIZ,UACE,oBAAIC,UAAU,QAAd,sCACA,uBACEC,SAjBmB,SAAEP,GACzBF,EAAeE,EAAEQ,OAAOC,QAiBpBC,KAAK,OACLD,MAAQZ,Q,+BCzBDc,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAWH,GAF7C,+DAGFI,MAAOF,GAHL,cAGfG,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAWD,EAAKE,KAAK,SAAAC,GAAS,IAAD,EAE/B,MAAO,CACLC,GAAID,EAAKC,GACTC,MAAOF,EAAKE,MACZC,SAAQ,UAAEH,EAAKI,cAAP,aAAE,EAAaC,YAAYb,QAXpB,kBAiBZM,GAjBY,4CAAH,sDCCTQ,EAAU,SAAEC,GAIvB,OAFAC,QAAQC,IAAIF,GAGV,sBAAKvB,UAAU,2CAAf,UACE,qBACE0B,IAAMH,EAAIJ,SACVQ,IAAMJ,EAAIL,QAEZ,4BAAKK,EAAIL,YCRFU,EAAU,SAAC,GAAoB,IAAjBtB,EAAgB,EAAhBA,SAEzB,ECH0B,SAAEA,GAE5B,MAA0BhB,mBAAS,CACjCuB,KAAM,GACNgB,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAW,WACT3B,EAASC,GACN2B,MAAM,SAAAC,GAELC,YAAW,WACTJ,EAAU,CACRlB,KAAMqB,EACNL,SAAS,MAEV,WAGP,CAAEvB,IAEGwB,EDlB0BM,CAAc9B,GAAlCc,EAAb,EAAQP,KAAagB,EAArB,EAAqBA,QAIrB,OAFAL,QAAQC,IAAII,GAGV,qCACA,6BAAMvB,IAEJuB,GAAW,oBAAG7B,UAAU,0CAAb,iCAA6EM,KAE1F,qBAAKN,UAAU,YAAf,SAEIoB,EAAOL,KAAK,SAAAQ,GAAG,OACb,cAAC,EAAD,eAEMA,GADEA,EAAIN,aEhBToB,EAAe,WAE1B,MAAoC/C,mBAAS,CAAC,cAA9C,mBAAOgD,EAAP,KAAmBjD,EAAnB,KAEA,OACE,qCACE,sDACA,uBAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,6BAEIiD,EAAWvB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CACEA,SAAWA,GACLA,Y,MCfpBiC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.04acdf4e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputValue = ( e ) => {\n    setInputValue( e.target.value );\n  };\n\n  const handleSubmit = ( e ) => {\n    e.preventDefault();\n\n    if ( inputValue.trim().length > 2 ){\n      setCategories( cats => [ inputValue, ...cats ]);\n      setInputValue('')\n    }else alert('Please enter a valid gif category')\n  };\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <h6 className=\"title\">Type your Gif Category: </h6>\n      <input \n        onChange={ handleInputValue }\n        type=\"text\"\n        value={ inputValue }\n      />\n    </form>\n  )\n}\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","\n  export const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=12&api_key=zoPqydGyVGGouAnSzZyy9d6uvYvTHPcf`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifsData = data.map( gifs => {\n\n        return {\n          id: gifs.id,\n          title: gifs.title,\n          imageUrl: gifs.images?.fixed_width.url,\n        }\n    })\n\n    // console.log(data);\n    // console.log(gifsData);\n      return gifsData;\n  };","import React from 'react'\n\nexport const GifItem = ( img ) => {\n  \n  console.log(img);\n  \n  return (\n    <div className=\"card animate__animated animate__backInUp\">\n      <img \n        src={ img.imageUrl } \n        alt={ img.title }\n      />\n      <p>{ img.title }</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifItem } from './GifItem';\n\nexport const GifData = ( { category } ) => {\n\n  const { data:images, loading } = useFetchGifs( category );\n\n  console.log(loading);\n\n  return (\n    <>\n    <h4>{ category }</h4>\n\n    { loading && <p className=\" flag animate__animated animate__bounce\">Loading 12 gifs of: { category }</p> }\n\n    <div className=\"card-grid\">\n      {\n        images.map( img => \n          <GifItem \n            key={ img.id }\n            {...img}\n          />\n        )\n      }\n    </div>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n  \n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect( () => {\n    getGifs( category )\n      .then( imgs => {\n\n        setTimeout(() => {\n          setState( {\n            data: imgs,\n            loading: false,\n          } )\n        }, 1800);\n\n      })\n  },[ category ]);\n\n  return state; // { data: [], loading: true }\n\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifData } from './components/GifData';\n\nexport const GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['Punch Out']);\n\n  return (\n    <>\n      <h3>Gif expert Lucho App</h3>\n      <hr/>\n\n      <AddCategory setCategories={ setCategories }/>\n\n      <ol>\n        {\n          categories.map( category => \n            <GifData \n              category={ category }\n              key={ category }\n            />\n          )\n        }\n      </ol>\n    \n    </>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}